{
	"info": {
		"_postman_id": "ff307825-bc56-4f33-9ce3-07fcb2093bf8",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json(); //mendapatkan nilai response body dalam bentuk json\r",
							"    pm.expect(responseJson).to.be.an('object'); \r",
							"})\r",
							"\r",
							"pm.test('response body shoud have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test('response body data should have noteId property and notequal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const {data} = responseJson; //dapatkan nilai objek data dari response\r",
							"\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('noteId', data.noteId); //menyimpan nama variabel dan nilai\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "18.138.230.205:5000/notes",
					"host": [
						"18",
						"138",
						"230",
						"205"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pastikan response memiliki status code 200.\r",
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Pastikan header response Content-Type memiliki nilai application/json.\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Pastikan body response merupakan object.\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   \r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan data pada response body memiliki array notes dan terdapat minimal 1 item di dalamnya.\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"    //mendapatkan objek data dari response body dalam bentuk json\r",
							"    const responseJson = pm.response.json();\r",
							"    const {data} = responseJson;\r",
							"    //uji nilai objek data, harus punya properti notes yang merupakan array dan minimal punya 1 item\r",
							"    pm.expect(data).to.have.ownProperty('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes).lengthOf.at.least(1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "18.138.230.205:5000/notes",
					"host": [
						"18",
						"138",
						"230",
						"205"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pastikan response memiliki status code 200.\r",
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Pastikan header response Content-Type memiliki nilai application/json.\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Pastikan body response merupakan object.\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan data pada response body memiliki properti note yang merupakan sebuah objek.\r",
							"pm.test('response body data should contain note object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							"   pm.expect(data).to.have.ownProperty('note');\r",
							"   pm.expect(data.note).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan objek note di dalam data memiliki properti id, title, body, dan tags dengan nilai yang sesuai.\r",
							"pm.test('note object should contain correct value for id, tittle, body, and tags property', () => {\r",
							"    \r",
							"    //mendapatkan onjek note dari data \r",
							"    const responseJson = pm.response.json();\r",
							"    const {data: {note}} = responseJson;\r",
							"    \r",
							"    //menentukan nilai ekspektasi \r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A';\r",
							"    const expectedTags = ['Android', 'Web'];\r",
							"    const expectedBody = 'Isi dari catatan A';\r",
							"    \r",
							"    //uji objek note bahwa ia harus memiliki properti dan nilai yang sesuai dengan nilai ekspektasi\r",
							"    //pm.expect(note).to.have.ownProperty('id');\r",
							"    pm.expect(note.id).to.have.equals(expectedId);\r",
							"\r",
							"    //pm.expect(note).to.have.ownProperty('title');\r",
							"    pm.expect(note.title).to.have.equals(expectedTitle);\r",
							"\r",
							"    //pm.expect(note).to.have.ownProperty('tags');\r",
							"    pm.expect(note.tags).to.have.eql(expectedTags);\r",
							"\r",
							"    //pm.expect(note).to.have.ownProperty('body');\r",
							"    pm.expect(note.body).to.have.equals(expectedBody);\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "18.138.230.205:5000/notes/{{noteId}}",
					"host": [
						"18",
						"138",
						"230",
						"205"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pastikan response memiliki status code 200.\r",
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Pastikan header response Content-Type memiliki nilai application/json.\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Pastikan body response merupakan object.\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan body response memiliki properti dan nilai yang sesuai.\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui.');\r",
							"}); \r",
							"\r",
							"//Pastikan catatan yang diperbarui memiliki nilai terbaru.\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://18.138.230.205:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error){\r",
							"            pm.test('then the updated note should contain the latest data', () => {\r",
							"                //dapatkan nilai objek note pada data melalui response body dalam bentuk JSON\r",
							"                const responseJson = response.json();\r",
							"                //memastikan responseJson tidak undefined\r",
							"                //pm.expect(responseJson).to.not.be.undefined;\r",
							"                const {data: {note}} = responseJson;\r",
							"                \r",
							"                //menentukan nilai ekspektasi\r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = [\"Android\", \"Web\"];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							"\r",
							"                //menguji kesamaan nilai ekspektasi dengan objek note\r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            })\r",
							"        } \r",
							"    })\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "18.138.230.205:5000/notes/{{noteId}}",
					"host": [
						"18",
						"138",
						"230",
						"205"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pastikan response memiliki status code 200.\r",
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Pastikan header response Content-Type memiliki nilai application/json.\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Pastikan body response merupakan object.\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"//Pastikan body response memiliki properti dan nilai yang sesuai.\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"}); \r",
							"\r",
							"//Pastikan catatan yang diperbarui memiliki nilai terbaru.\r",
							"pm.test('when request the deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://18.138.230.205:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error){\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"\r",
							"                //uji nilai body pada response.\r",
							"                //pastikan properti dan nilai relavan dengan status code\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            })\r",
							"        } \r",
							"    })\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "18.138.230.205:5000/notes/{{noteId}}",
					"host": [
						"18",
						"138",
						"230",
						"205"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}